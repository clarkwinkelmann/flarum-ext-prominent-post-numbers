{"version":3,"file":"forum.js","mappings":"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","sources":["webpack://@clarkwinkelmann/prominent-post-numbers/webpack/bootstrap","webpack://@clarkwinkelmann/prominent-post-numbers/webpack/runtime/compat get default export","webpack://@clarkwinkelmann/prominent-post-numbers/webpack/runtime/define property getters","webpack://@clarkwinkelmann/prominent-post-numbers/webpack/runtime/hasOwnProperty shorthand","webpack://@clarkwinkelmann/prominent-post-numbers/webpack/runtime/make namespace object","webpack://@clarkwinkelmann/prominent-post-numbers/external root \"flarum.core.compat['forum/app']\"","webpack://@clarkwinkelmann/prominent-post-numbers/external root \"flarum.core.compat['common/extend']\"","webpack://@clarkwinkelmann/prominent-post-numbers/external root \"flarum.core.compat['common/utils/extractText']\"","webpack://@clarkwinkelmann/prominent-post-numbers/external root \"flarum.core.compat['common/components/Link']\"","webpack://@clarkwinkelmann/prominent-post-numbers/external root \"flarum.core.compat['forum/components/CommentPost']\"","webpack://@clarkwinkelmann/prominent-post-numbers/external root \"flarum.core.compat['forum/components/PostPreview']\"","webpack://@clarkwinkelmann/prominent-post-numbers/./src/forum/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/utils/extractText'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Link'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/CommentPost'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/PostPreview'];","import app from 'flarum/forum/app';\nimport {extend} from 'flarum/common/extend';\nimport extractText from 'flarum/common/utils/extractText';\nimport Post from 'flarum/common/models/Post';\nimport Link from 'flarum/common/components/Link';\nimport CommentPost from 'flarum/forum/components/CommentPost';\nimport PostPreview from \"flarum/forum/components/PostPreview\";\n\nfunction prominentPostNumber(post: Post) {\n    return m('span.ProminentPostNumber', (app.forum.attribute<string>('prominentPostNumberFormat') || '').replace('{number}', post.number() + ''));\n}\n\napp.initializers.add('prominent-post-numbers', () => {\n    extend(CommentPost.prototype, 'headerItems', function (items) {\n        // @ts-ignore\n        const post = this.attrs.post as Post;\n\n        // We want to add it just before PostMeta, unfortunately PostMeta doesn't have a priority\n        // Luckily it's the first item without a priority so priority 1 should put us just before\n        items.add('number', prominentPostNumber(post), 1);\n    });\n\n    extend(PostPreview.prototype, 'view', function (vdom) {\n        vdom.children.forEach(preview => {\n            if (!preview || !preview.attrs || !preview.attrs.className || preview.attrs.className.indexOf('PostPreview-content') === -1) {\n                return;\n            }\n\n            if (!this.attrs.post.user()) {\n                preview.children.forEach((child, index) => {\n                    if (child && child.tag === 'span' && child.text === extractText(app.translator.trans('core.lib.username.deleted_text'))) {\n                        preview.children.splice(index, 1);\n                    }\n                });\n            }\n\n            preview.children.splice(1, 0, prominentPostNumber(this.attrs.post), {\n                tag: '#', // The space must be inserted in vdom way to be valid\n                children: ' ',\n            });\n        });\n    });\n\n    // There's no easy way to override Mention's template in addMentionedByList / CommentPost.prototype.footerItems\n    // To avoid re-implementing the full method, we'll cheat by hooking into Link directly\n    extend(Link.prototype, 'view', function (vdom) {\n        // Links added by Mentions have a data-number attribute, skip if missing\n        if (!('data-number' in this.attrs)) {\n            return;\n        }\n\n        // It's simpler to retrieve the number from the data-attribute\n        // Trying to read the href would be more complicated because first post link would not contain the number\n        const number = parseInt(this.attrs['data-number']);\n\n        const routePrefix = app.route('discussion', {\n            id: '',\n        });\n\n        // Skip links that aren't to discussions/posts\n        if (!this.attrs.href || this.attrs.href.indexOf(routePrefix) !== 0) {\n            return;\n        }\n\n        const discussionSlug = this.attrs.href.substr(routePrefix.length).split('/')[0];\n\n        const post = app.store.all<Post>('posts').find(post => {\n            return post.number() === number && post.discussion()?.slug() === discussionSlug;\n        });\n\n        // If the post can't be found, ignore\n        if (!post) {\n            return;\n        }\n\n        // Add number in front\n        vdom.children.unshift(prominentPostNumber(post), ' ');\n\n        // If the post has an author, don't change anything else\n        if (post.user()) {\n            return;\n        }\n\n        // Remove [deleted] text\n        vdom.children.forEach((child, index) => {\n            if (child && child.tag === 'span' && child.text === extractText(app.translator.trans('core.lib.username.deleted_text'))) {\n                vdom.children.splice(index, 1);\n            }\n        });\n    });\n});\n\n// We don't need to validate or invalidate the tag here because Mention's original filter still runs\n// We'll just change the display name\nexport function filterPostMentions(tag: any) {\n    const post = app.store.getById('posts', tag.getAttribute('id'));\n\n    if (post) {\n        const user = post.user();\n\n        // Remove [deleted] text from mention\n        if (!user) {\n            tag.setAttribute('displayname', '');\n        }\n    }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","prominentPostNumber","post","m","app","replace","number","filterPostMentions","tag","getAttribute","user","setAttribute","extend","CommentPost","items","this","attrs","add","PostPreview","vdom","children","forEach","preview","className","indexOf","child","index","text","extractText","splice","Link","parseInt","routePrefix","id","href","discussionSlug","substr","length","split","find","discussion","slug","unshift"],"sourceRoot":""}